// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// seq_along
vector<int> seq_along(int n);
RcppExport SEXP _cppbart_seq_along(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_along(n));
    return rcpp_result_gen;
END_RCPP
}
// grow
int grow(node curr_tree, Eigen::MatrixXd x);
RcppExport SEXP _cppbart_grow(SEXP curr_treeSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< node >::type curr_tree(curr_treeSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(grow(curr_tree, x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cppbart_seq_along", (DL_FUNC) &_cppbart_seq_along, 1},
    {"_cppbart_grow", (DL_FUNC) &_cppbart_grow, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cppbart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
